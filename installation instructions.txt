This document explains how to get the CrisisTracker system running on your own server. If it doesn't work, please contact jakob.rogstadius@gmail.com.


=== REGISTER TWITTER ACCOUNTS ===

1. Register two new Twitter accounts for the system to use. Future versions of the system may use one of them to post information, but currently they only read data.


=== CREATE AND INITIALIZE THE DATABASE ===

1. Create database using script in /Server/Documentation folder. The script is written for MySQL and may need modification for other database management systems. Create an account with read and write access for the system to use.

2. Add tracking keywords to the TwitterTrackingKeyword table.

3. Add information categories to the InfoCategory table. The color codes are not currently used.

4. Modify /Server/Common/settings.xml to contain a correct connection string to the database, and login info to the two Twitter accounts.


=== START PROCESSING TWITTER DATA ===

1. Compile the entire solution in /Server using Visual Studio. The system has only been used with Mono 2.4, but should also work if compiled for .Net 3.5 or higher.

2. Make sure that whatever target framework the solution was compiled for (e.g. Mono 2.4) is installed on the server.

3. Copy the following files to a folder on the server, from their respective compilation directories:
- CrisisTracker.Common.dll
- FilterStreamConsumer.exe
- SampleStreamConsumer.exe
- TweetParser.exe
- TweetClusterer.exe
- settings.xml
- MySql.Data.dll

4. Start SampleStreamConsumer.exe and TweetParser.exe  on the server (e.g. in separate screens) and let them run for 20-60 minutes. The system needs to build up decently accurate word statistics before processing event-specific content.

5. If any application has created debug.txt, check the log for errors and debug.

6. Check in the database that the TweetJson, Word and WordScore tables are being populated.

7. Start FilterStreamConsumer.exe and TweetClusterer.exe.

8. Check that the Tweet, TweetCluster and Story tables are being populated. If not, check debug.txt for hints.


=== SET UP WEB FRONT-END ===

1. Modify the database connection details in /Web/api/open_db.php.

2. Modify /Web/resources/javascript/categorybuttons.js to contain the same information categories (in the same order) that were added to the InfoCategory table in the database. If you didn't use exactly 14 categories, you need to modify line 42 of the same file to match your number.

3. Check that the colors in /Web/resources/css/main.css (classes .cc1-cc14) are suitable for your information categories. Add more numbered classes if needed.

4. Copy entire /Web folder to a publicly accessible folder on a web server.

5. Load up the site in a web browser. If it doesn't work, and debugging doesn't solve the problem, contact Jakob (see top of file) and we'll try to figure out what went wrong.