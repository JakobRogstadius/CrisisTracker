This document explains how to get the CrisisTracker system running on your own server. If it doesn't work, please contact jakob.rogstadius@gmail.com.


=== REGISTER TWITTER ACCOUNTS ===

1. Register two new Twitter accounts for the system to use. Future versions of the system may use one of them to post information, but currently they only read data.


=== CREATE AND INITIALIZE THE DATABASE ===

1. Create database using script in /Server/Documentation folder. The script is written for MySQL and may need modification for other database management systems. Create an account with read and write access for the system to use.

2. Add tracking keywords to the TwitterTrackingFilter table:
ID - auto incremented ID
IsActive - 1 for active, 0 for disabled
IsStrong - 1 if the filter is so high quality that all tweets that contain the word should be processed. 0 if the word is 'weak' in which case more than one weak filter is needed to keep the tweet. This field can be useful if no filters can be found that uniquely refer to the event of interest. 
Hits1d - Approximate number of tweets that matched the filter in the past one day.
Discards1d - Approximate number of tweets that matched the filter but were discarded. Only applies to weak filters.
FilterType - 0 for keyword, 1 for user, 2 for geographic region (see below).
Word - keyword to track, or null
UserID - user ID to track, or null
UserName - User name (not used, but helps to tell user IDs apart), or null
Region - Geographic region (box) for which to track geotagged tweets, or null. Coordinates as minlon,minlat,maxlon,maxlat.

Example: IsActive=1, IsStrong=1, FilterType=0, Word=earthquake (this will collect all tweets that contain the word earthquake)

3. Add information categories to the InfoCategory table. The color codes are not currently used.

4. Modify /Server/Common/settings.xml to contain a correct connection string to the database, and login info to the two Twitter accounts.


=== ADD TWITTER'S ROOT CERTIFICATE TO MONO'S TRUST STORE ===
This only applies if you are using Mono. There may be an equivalent step if you are using the .NET framework.

Twitter's root certificate needs to be installed before any Mono program can open a secure connection to Twitter's servers: https://dev.twitter.com/discussions/533

The third option (mozroots.exe) on this site has been used successfully to install the certificate: http://www.mono-project.com/FAQ:_Security


=== START PROCESSING TWITTER DATA ===

1. Compile the entire solution in /Server using Visual Studio, or each project separately from the command line. Compilation requires at least Mono 2.8 or .Net 4.0, primarily due to use of syntax first introduced in C# 4.0. Once compiled, the code has run fine on Mono 2.4.

2. Make sure that whatever target framework the solution was compiled for (e.g. Mono 2.10) is installed on the server.

3. Copy the following files to a folder on the server, from their respective compilation directories:
- CrisisTracker.Common.dll
- FilterStreamConsumer.exe
- SampleStreamConsumer.exe
- TweetParser.exe
- TweetClusterer.exe
- settings.xml
- MySql.Data.dll

4. Start SampleStreamConsumer.exe and TweetParser.exe  on the server (e.g. in separate screens) and let them run for 20-60 minutes. The system needs to build up decently accurate word statistics before processing event-specific content.

5. If any application has created debug.txt, check the log for errors and debug. If you see errors like the one below, you have not successfully installed Twitter's root certificate (previous step):

System.Net.WebException: Error getting response stream (Write: The authentication or decryption has failed.): SendFailure ---> System.IO.IOException: The authentication or decryption has failed. ---> Mono.Security.Protocol.Tls.TlsException: Invalid certificate received from server. Error code: 0xffffffff800b010a 
  at Mono.Security.Protocol.Tls.Handshake.Client.TlsServerCertificate.validateCertificates (Mono.Security.X509.X509CertificateCollection certificates) [0x00000] in <filename unknown>:0 

6. Check in the database that the TweetJson, Word and WordScore tables are being populated.

7. Start FilterStreamConsumer.exe and TweetClusterer.exe.

8. Check that the Tweet, TweetCluster and Story tables are being populated. If not, check debug.txt for hints.


=== SET UP WEB FRONT-END ===

1. Modify the database connection details in /Web/api/open_db.php.

2. Modify /Web/resources/javascript/categorybuttons.js to contain the same information categories (in the same order) that were added to the InfoCategory table in the database. If you didn't use exactly 14 categories, you need to modify line 42 of the same file to match your number.

3. Check that the colors in /Web/resources/css/main.css (classes .cc1-cc14) are suitable for your information categories. Add more numbered classes if needed.

4. Copy entire /Web folder to a publicly accessible folder on a web server.

5. Load up the site in a web browser. If it doesn't work, and debugging doesn't solve the problem, contact Jakob (see top of file) and we'll try to figure out what went wrong.